<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:main="org.bigbluebutton.air.main.views.*"
			   xmlns:voice="org.bigbluebutton.air.voice.views.*"
			   applicationComplete="applicationCompleteHandler(event)"
			   creationComplete="creationCompleteHandler(event)"
			   preinitialize="preinitializeHandler(event)"
			   runtimeDPIProvider="CustomRuntimeDPIProvider"
			   styleName="mainshellStyle">
	<fx:Style source="Default.css" />

	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>

	<fx:Script>
		<![CDATA[
			import com.adobe.utils.LocaleUtil;
			
			import mx.events.FlexEvent;
			import mx.resources.ResourceManager;
			
			import org.bigbluebutton.air.AppConfig;
			import org.bigbluebutton.air.chat.ChatConfig;
			import org.bigbluebutton.air.common.utils.PagesENUM;
			import org.bigbluebutton.air.common.utils.TransitionAnimationENUM;
			import org.bigbluebutton.air.common.views.NoTabView;
			import org.bigbluebutton.air.deskshare.views.DeskshareConfig;
			import org.bigbluebutton.air.main.MainConfig;
			import org.bigbluebutton.air.main.utils.OrientationCalculator;
			import org.bigbluebutton.air.presentation.views.PresentationConfig;
			import org.bigbluebutton.air.settings.views.AudioSettingsConfig;
			import org.bigbluebutton.air.settings.views.CameraSettingsConfig;
			import org.bigbluebutton.air.users.views.ParticipantsConfig;
			import org.bigbluebutton.air.users.views.UserDetailsConfig;
			import org.bigbluebutton.air.video.views.SwapCameraConfig;
			import org.bigbluebutton.air.video.views.VideoChatConfig;
			import org.bigbluebutton.air.voice.views.MicButtonConfig;
			
			import robotlegs.bender.bundles.mvcs.MVCSBundle;
			import robotlegs.bender.extensions.contextView.ContextView;
			import robotlegs.bender.extensions.signalCommandMap.SignalCommandMapExtension;
			import robotlegs.bender.framework.api.IContext;
			import robotlegs.bender.framework.api.LogLevel;
			import robotlegs.bender.framework.impl.Context;
			
			protected var context:IContext;
			
			private var _orientationCalc:OrientationCalculator;
			
			public var currentOrientation:String;
			
			protected function preinitializeHandler(event:FlexEvent):void {
				setupContext();
				resizeForSoftKeyboard = true;
				//NativeApplication.nativeApplication.addEventListener(InvokeEvent.INVOKE, onInvokeEvent);
				ResourceManager.getInstance().localeChain = LocaleUtil.sortLanguagesByPreference(['en_US', 'pt_BR'], Capabilities.languages, "en_US");
			}
			
			/*
			   public function onInvokeEvent(invocation:InvokeEvent):void
			   {
			   var traceString:String = "";
			
			   var arguments:Array = invocation.arguments;
			   var currentDir:File = invocation.currentDirectory;
			   var reason:String = invocation.reason;
			   traceString += "-----InvokeEvent.INVOKE----\n";
			   traceString += "arguments: "+arguments.toString()+"\n\n";
			   traceString += "currentDir: "+currentDir+"\n\n";
			   traceString += "reason: "+reason+"\n\n";
			
			   var url:String = arguments.toString().replace('bigbluebutton://', 'http://');
			
			   traceString += "url: "+url+"\n\n";
			
			   traceText.text += traceString;
			   }
			 */
			/**
			 * Sets up the Robotlegs context.
			 */
			private function setupContext():void {
				context = new Context()
					.install(MVCSBundle, SignalCommandMapExtension)
					.configure(AppConfig)
					
					.configure(MainConfig)
					.configure(PresentationConfig)
					.configure(ChatConfig)
					.configure(VideoChatConfig)
					.configure(UserDetailsConfig)
					.configure(ParticipantsConfig)
					.configure(MicButtonConfig)
					.configure(SwapCameraConfig)
					.configure(DeskshareConfig)
					.configure(CameraSettingsConfig)
					.configure(AudioSettingsConfig)
					
					.configure(new ContextView(this));
				// If you wish to change the log level then uncomment the line below and set 
				// the logLevel to the value you desire. The default logLevel is DEBUG, which 
				// is set in the MVCSBundle. The default log level traces out the framework 
				// actions, which can assist in learning Robotlegs.
				setLogLevel();
			}
			
			/**
			 * Sets the logLevel for the robotegs context.
			 */
			private function setLogLevel():void {
				// setting the logLevel to WARN means that robotlegs
				// will also notify us about ERROR & FATAL.
				context.logLevel = LogLevel.WARN;
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void {
			}
			
			protected function applicationCompleteHandler(event:FlexEvent):void {
				stage.addEventListener(Event.ACTIVATE, fl_Activate);
				stage.addEventListener(Event.DEACTIVATE, fl_Deactivate);
				stage.addEventListener(StageOrientationEvent.ORIENTATION_CHANGING, stageOrientationChangingHandler);
				// setup a custom orientation calculator based on the accelerometer because the default one doesn't work
				_orientationCalc = new OrientationCalculator(pagesNavigatorView, accelerometerCallback);
				_orientationCalc.active = true;
				currentOrientation = _orientationCalc.currentOrientation;
			}
			
			private function fl_Activate(event:Event = null):void {
				NativeApplication.nativeApplication.systemIdleMode = SystemIdleMode.KEEP_AWAKE;
			}
			
			private function fl_Deactivate(event:Event):void {
				NativeApplication.nativeApplication.systemIdleMode = SystemIdleMode.NORMAL;
			}
			
			private function stageOrientationChangingHandler(e:StageOrientationEvent):void {
				e.preventDefault();
			}
			
			private function accelerometerCallback():void {
				currentOrientation = _orientationCalc.currentOrientation;
				(pagesNavigatorView.activeView as NoTabView).rotationHandler(_orientationCalc.currentOrientation);
			}
		]]>
	</fx:Script>

	<fx:Metadata>
		[ResourceBundle("resources")]
	</fx:Metadata>

	<main:LoadingScreen width="100%"
						   height="100%" />

	<s:Group id="mainshell"
			 visible="false"
			 width="100%"
			 height="100%">
		<s:layout>
			<s:VerticalLayout gap="0" />
		</s:layout>
		<s:SkinnableContainer id="topActionBar"
							  width="100%"
							  height="{getStyle('toolBarHeight')}"
							  styleName="topToolBarStyle"
							  verticalCenter="0">
			<s:HGroup width="100%"
					  height="100%">
				<s:Group>
					<main:NavigationButton id="profileBtn"
										 navigateTo="{[PagesENUM.PROFILE]}"
										 styleName="profileButtonStyle topButtonStyle"
										 transitionAnimation="{TransitionAnimationENUM.SLIDE_LEFT}" />
					<main:NavigationButton id="backBtn"
										 navigateTo="{[PagesENUM.LAST]}"
										 styleName="backButtonStyle topButtonStyle"
										 transitionAnimation="{TransitionAnimationENUM.SLIDE_RIGHT}" />
				</s:Group>
				<s:Label id="pageName"
						 width="100%"
						 height="100%"
						 styleName="pageNameStyle" />
				<main:RecordingStatus id="recordingStatus"
									styleName="recordingStatusIconStyle topButtonStyle" />
				<voice:MicButton id="microphoneBtn"
							  styleName="micButtonStyle topButtonStyle" />
			</s:HGroup>
		</s:SkinnableContainer>

		<main:PagesNavigatorView id="pagesNavigatorView"
									   width="100%"
									   height="100%" />
		<main:MenuButtonsView id="bottomMenu"
								width="100%"
								height="{getStyle('bottomToolBarHeight')}" />
	</s:Group>
</s:Application>
